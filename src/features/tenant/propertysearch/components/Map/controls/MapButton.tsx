import React from "react";
import mapboxgl from "mapbox-gl";

interface MapButtonProps {
  isActive: boolean;
  onClick: () => void;
  map: mapboxgl.Map | null;
  showStyleOptions: boolean;
  setShowStyleOptions: (show: boolean) => void;
  currentStyle: string;
  setCurrentStyle: (styleId: string) => void;
}

// Define available map styles with their icons
const mapStyles = [
  { 
    id: 'streets', 
    name: 'Map', 
    url: 'mapbox://styles/mapbox/streets-v11',
    icon: (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
  <path d="M5.0847 7.1904C6.25538 7.1904 7.2081 6.23768 7.2081 5.067C7.2081 3.89632 6.25538 2.9436 5.0847 2.9436C3.91402 2.9436 2.9613 3.89593 2.9613 5.067C2.9613 6.23807 3.91402 7.1904 5.0847 7.1904ZM5.0847 4.42795C5.43704 4.42795 5.72375 4.71466 5.72375 5.067C5.72375 5.41934 5.43704 5.70605 5.0847 5.70605C4.73236 5.70605 4.44565 5.41934 4.44565 5.067C4.44565 4.71466 4.73236 4.42795 5.0847 4.42795Z" fill="white"/>
  <path d="M18.9067 6.68932C18.5551 4.70069 16.7907 2.93588 14.8017 2.58432L14.7942 2.58315C13.4267 2.35581 11.9798 2.24449 10.3689 2.24253C10.0111 2.24292 9.65762 2.24917 9.31232 2.2605C8.40062 0.89842 6.84791 0 5.08935 0H5.07998C2.27886 0 0 2.27886 0 5.07998C0 6.66979 0.808187 8.13109 1.55427 9.14123C1.51325 9.77403 1.49216 10.4385 1.49138 11.122C1.49333 12.7326 1.60466 14.1794 1.832 15.5458C1.83239 15.5481 1.83278 15.5505 1.83317 15.5532C2.18433 17.5418 3.94914 19.3067 5.93817 19.6582C5.94051 19.6586 5.94324 19.659 5.94559 19.6594C7.31314 19.8867 8.75998 19.998 10.3709 20C11.9802 19.998 13.4271 19.8867 14.7942 19.6594C14.7966 19.659 14.7993 19.6586 14.8017 19.6582C16.7903 19.3067 18.5551 17.5422 18.9067 15.5532C18.9071 15.5509 18.9074 15.5481 18.9078 15.5458C19.1352 14.1786 19.2465 12.7318 19.2485 11.1205C19.2465 9.51153 19.1352 8.06469 18.9078 6.69713C18.9074 6.69479 18.9071 6.69206 18.9067 6.68971V6.68932ZM5.07998 1.48435H5.08935C7.07174 1.48435 8.68499 3.09721 8.68499 5.07998C8.68499 6.08855 8.18343 7.28775 7.2733 8.45726C6.48854 9.46505 5.62059 10.1721 5.0874 10.4471C4.56163 10.176 3.71086 9.48614 2.93471 8.50257C2.91283 8.46937 2.88862 8.43812 2.86166 8.40882C1.9734 7.25455 1.48474 6.0741 1.48474 5.07959C1.48474 3.0972 3.0976 1.48396 5.08037 1.48396L5.07998 1.48435ZM2.97924 10.7256C3.54681 11.2443 4.1214 11.6506 4.60968 11.863C4.76124 11.9291 4.92412 11.9619 5.08662 11.9619C5.24912 11.9619 5.41239 11.9287 5.56395 11.8627C6.42605 11.4873 7.55649 10.5084 8.44398 9.36857C9.86973 7.53735 10.1689 6.02527 10.1689 5.07959C10.1689 4.61241 10.1053 4.15968 9.98652 3.72961C10.1135 3.72805 10.2412 3.72688 10.3693 3.72688C11.8947 3.72844 13.2615 3.83313 14.547 4.0468C14.995 4.12648 15.4434 4.31906 15.8552 4.60343L3.85266 16.6063C3.56829 16.1946 3.37572 15.7458 3.29603 15.2977C3.08236 14.0134 2.97807 12.647 2.97611 11.1217C2.97611 10.9885 2.97768 10.8568 2.97924 10.7252V10.7256ZM14.547 18.1953C13.2615 18.409 11.8951 18.5137 10.3709 18.5153C8.84553 18.5137 7.47876 18.409 6.19324 18.1953C5.75262 18.1168 5.31161 17.9289 4.90576 17.6528L10.3725 12.1861L15.8376 17.6512C15.4309 17.9286 14.9888 18.1172 14.547 18.1957V18.1953ZM17.4446 15.2977C17.3649 15.745 17.1731 16.1927 16.8895 16.604L11.422 11.1365L16.902 5.65653C17.1786 6.06277 17.3661 6.50378 17.4446 6.9444C17.6582 8.22992 17.7629 9.59669 17.7645 11.1205C17.7629 12.6466 17.6582 14.013 17.4446 15.2981V15.2977Z" fill="white"/>
</svg>
    )
  },
  { 
    id: 'satellite', 
    name: 'Satellite', 
    url: 'mapbox://styles/mapbox/satellite-v9',
    icon: (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
  <path d="M15.2075 1.46015C10.4986 -1.41129 4.33154 0.083628 1.46013 4.7925C-1.41127 9.50137 0.0836107 15.6684 4.79248 18.5398C5.05482 18.6998 5.32181 18.846 5.5924 18.9791C5.59677 18.9813 5.60119 18.9835 5.60564 18.9855C7.0042 19.6709 8.50123 20 9.98353 20C13.359 20 16.6576 18.2943 18.5399 15.2075C21.4113 10.4986 19.9163 4.3316 15.2075 1.46015ZM7.57326 1.83109L7.45119 2.31613L4.84314 3.78394L4.31131 3.65011C5.24142 2.81461 6.34935 2.19308 7.57326 1.83109ZM5.17013 12.6003L5.02982 12.7555C4.59338 13.2385 4.40607 13.8836 4.51584 14.5252L4.91119 16.8357C3.31474 15.6515 2.19224 13.963 1.71822 12.0075C1.36025 10.5307 1.40107 9.02004 1.81994 7.60058L4.27525 9.00574C4.51869 9.14508 4.64091 9.4323 4.57244 9.70434C4.39552 10.4073 4.58728 11.1415 5.08537 11.6681L5.16041 11.7474C5.38419 11.984 5.38841 12.3586 5.17013 12.6003ZM10.3661 18.516L10.2131 17.5823L10.3363 17.5276C10.7812 17.3305 11.3008 17.4805 11.5719 17.8845L11.8611 18.3153C11.3645 18.4267 10.8647 18.4936 10.3661 18.516ZM17.2756 14.4366C16.3341 15.9806 14.9593 17.1593 13.3248 17.8477C13.3122 17.8234 13.2983 17.7995 13.2827 17.7762L12.8014 17.0592C12.1288 16.057 10.8397 15.6847 9.73623 16.1739L9.08982 16.4604C8.78173 16.5971 8.60478 16.9245 8.65927 17.257L8.85455 18.4485C8.07412 18.3429 7.30955 18.1275 6.57951 17.8059L5.97541 14.2754C5.94267 14.0842 5.99849 13.8921 6.12853 13.7482L6.26884 13.593C7.00177 12.7818 6.98748 11.5242 6.2363 10.7299L6.16127 10.6506C6.01291 10.4937 5.9558 10.2751 6.00845 10.0656C6.23822 9.15254 5.82794 8.1882 5.0108 7.72051L2.36834 6.20828C2.47736 5.98969 2.59568 5.77441 2.72435 5.5634C2.86603 5.33113 3.01775 5.1073 3.17841 4.89191L4.76818 5.29195C4.82775 5.30695 4.88841 5.31437 4.94884 5.31437C5.07505 5.31437 5.20029 5.28211 5.31197 5.21922L8.45462 3.45054C8.63162 3.35093 8.75998 3.183 8.80947 2.98601L9.15533 1.6116C9.16318 1.58035 9.16822 1.5491 9.17193 1.51793C9.45337 1.48988 9.73482 1.47507 10.0155 1.47507C11.5616 1.47507 13.0828 1.89894 14.4364 2.72437C14.594 2.82046 14.7474 2.92156 14.8973 3.02656C14.8963 3.02761 14.8953 3.02843 14.8943 3.02941L13.6883 4.34765L10.5098 4.47105C10.2639 4.48058 10.0388 4.61172 9.90923 4.82086L8.52462 7.05519C8.3638 7.31469 8.37873 7.64621 8.5622 7.89019L9.43861 9.0557C9.62005 9.29703 9.71912 9.59617 9.71755 9.89809L9.7097 11.4177C9.70658 12.0187 9.96787 12.5861 10.4265 12.9746C10.7959 13.2876 11.2589 13.4551 11.7346 13.4551C11.8494 13.4551 11.965 13.4453 12.0801 13.4255L13.768 13.1351C14.3898 13.0281 14.9674 12.7134 15.3943 12.2489C15.6491 11.9718 15.9967 11.8125 16.3729 11.8005C16.7488 11.7879 17.1062 11.9252 17.3783 12.1855L17.853 12.6398C17.9149 12.6991 17.9847 12.7447 18.0586 12.7783C17.8598 13.351 17.5987 13.9067 17.2756 14.4366ZM18.4467 11.1584L18.4021 11.1157C17.8404 10.578 17.1031 10.2955 16.3257 10.3204C15.5484 10.3453 14.8305 10.6742 14.3042 11.2467C14.0975 11.4716 13.8179 11.6239 13.5169 11.6757L11.829 11.9661C11.6104 12.0037 11.4561 11.9062 11.3835 11.8447C11.3109 11.7832 11.1893 11.647 11.1904 11.4253L11.1983 9.90578C11.2015 9.28219 10.9969 8.66426 10.6221 8.16582L10.05 7.40496L10.9606 5.93547L14.0547 5.81539C14.2523 5.80773 14.4387 5.72133 14.5722 5.57535L15.9871 4.02906C16.0028 4.01187 16.0173 3.99402 16.0311 3.97582C17.1283 5.07035 17.9074 6.44808 18.2817 7.99254C18.537 9.0457 18.5893 10.1161 18.4467 11.1584Z" fill="white"/>
</svg>
    )
  },
  { 
    id: '3d', 
    name: '3D', 
    url: 'mapbox://styles/mapbox/light-v11',
    icon: (
      <svg xmlns="http://www.w3.org/2000/svg" width="17" height="18" viewBox="0 0 17 18" fill="none">
  <path d="M7.30232 1.31663L2.28759 4.10063C1.89622 4.3188 1.5704 4.63778 1.34398 5.02443C1.11756 5.41108 0.99879 5.8513 1.00001 6.29937V11.7006C0.99894 12.1486 1.11778 12.5886 1.3442 12.9751C1.57061 13.3616 1.89635 13.6804 2.28759 13.8985L7.30401 16.6834C7.67718 16.891 8.09716 17 8.52422 17C8.95127 17 9.37126 16.891 9.74443 16.6834L14.7608 13.8994C15.1522 13.6812 15.478 13.3622 15.7045 12.9756C15.9309 12.5889 16.0496 12.1487 16.0484 11.7006V6.29937C16.0495 5.85144 15.9307 5.4114 15.7042 5.02491C15.4778 4.63842 15.1521 4.31957 14.7608 4.10148L9.74443 1.31663C9.37126 1.10898 8.95127 1 8.52422 1C8.09716 1 7.67718 1.10898 7.30401 1.31663H7.30232Z" stroke="white" strokeWidth="1.8"/>
  <path d="M15.538 4.78613L8.5233 9.00003M8.5233 9.00003L1.50857 4.78613M8.5233 9.00003V16.9916" stroke="white" strokeWidth="1.8"/>
</svg>
    )
  }
];

const MapButton: React.FC<MapButtonProps> = ({
  isActive,
  onClick,
  map,
  showStyleOptions,
  setShowStyleOptions,
  currentStyle,
  setCurrentStyle
}) => {
  const handleClick = () => {
    onClick();
    setShowStyleOptions(!showStyleOptions);
  };

const changeMapStyle = (styleId: string) => {
  if (!map) return;
  
  const style = mapStyles.find(s => s.id === styleId);
  if (style) {
    map.setStyle(style.url);
    
    if (styleId === 'satellite') {
      // Set optimal satellite view settings
      map.setPitch(0);  // Flat overhead view
      map.setBearing(0); // North up orientation
    } else if (styleId === '3d') {
      // Set 3D view settings
      map.setPitch(62);
      map.setBearing(-20);
      
      // Use once instead of on to ensure the handler runs only once per style change
      map.once('style.load', () => {
        if (map.getLayer('3d-buildings')) return;
        
        
        try {
          if (!map.getSource('mapbox-buildings')) {
            map.addSource('mapbox-buildings', {
              'type': 'vector',
              'url': 'mapbox://mapbox.mapbox-streets-v8'
            });
          }
          
          // Add the 3D buildings layer using our custom source
          map.addLayer({
            'id': '3d-buildings',
            'source': 'mapbox-buildings',
            'source-layer': 'building',
            'type': 'fill-extrusion',
            'minzoom': 15,
            'paint': {
              'fill-extrusion-color': '#aaa',
              'fill-extrusion-height': [
                'interpolate', ['linear'], ['zoom'],
                15, 0,
                15.05, ['get', 'height']
              ],
              'fill-extrusion-base': [
                'interpolate', ['linear'], ['zoom'],
                15, 0,
                15.05, ['get', 'min_height']
              ],
              'fill-extrusion-opacity': 0.6
            }
          });
        } catch (error) {
          console.error('Error adding 3D buildings layer:', error);
        }
      });
    } else {
      // Reset to flat view for other styles
      map.setPitch(0);
      map.setBearing(0);
    }
    
    setCurrentStyle(styleId);
    setShowStyleOptions(false);
  }
};


  // Get current style object
  const currentStyleObj = mapStyles.find(s => s.id === currentStyle) || mapStyles[0];

return (
  <div className="relative">
    {/* Main Button - Shows the currently selected style */}
    <button
      className={`flex px-[10px] py-[5px] items-center gap-1 rounded-[16px] ${
        isActive ? "bg-[#001D3D]" : "bg-[rgba(32,54,77,0.30)]"
      }`}
      onClick={handleClick}
    >
      {currentStyleObj.icon}
      <span className="text-white text-[10px] font-bold">
        {currentStyleObj.name}
      </span>
    </button>

    {/* Map Style Options Dropdown */}
    {showStyleOptions && (
      <div 
        className="absolute bottom-12 z-20"
        style={{
          left: '50%',
          transform: 'translateX(-50%)'
        }}
      >
        {/* ✅ Container Box */}
        <div 
          className="rounded-lg border border-[rgba(255,255,255,0.30)] bg-[rgba(255,255,255,0.30)] backdrop-blur-[3px] p-2 flex flex-col gap-2"
          style={{ width: 'max-content' }}
        >
          {mapStyles
            .filter((style) => style.id !== currentStyle)
            .sort((a, b) => {
              if (a.id === 'satellite') return -1;
              if (b.id === 'satellite') return 1;
              return 0;
            })
            .map((style) => (
              <button
                key={style.id}
                className="flex px-[10px] py-[5px] items-center gap-1 rounded-[16px] [background:rgba(0,29,61,0.3)] backdrop-blur-[3.55px] whitespace-nowrap"
                onClick={() => changeMapStyle(style.id)}
              >
                {style.icon}
                <span className="text-white text-[10px] font-bold">
                  {style.name}
                </span>
              </button>
            ))}
        </div>
      </div>
    )}
  </div>
);

};

// Export the mapStyles for use in other components
export { mapStyles };
export default MapButton;
